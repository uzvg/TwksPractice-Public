caption: 
created: 20240919084309036
creator: uzvg
modified: 20250317081611218
modifier: uzvg
tags: FleetingNotes 正则表达式 AI-Generated
title: 正则表达式/贪婪量化
type: text/vnd.tiddlywiki

非贪婪模式（或称为懒惰模式）在正则表达式中是指在匹配时尽可能少地匹配字符，而不是尽可能多地匹配。让我们更详细地解释一下这个概念，以及它在你提到的正则表达式中的作用。

### 贪婪模式与非贪婪模式

1. **贪婪模式**：
   - 默认情况下，正则表达式的量词（如 `*`、`+`、`?`）是贪婪的。这意味着它们会尽可能多地匹配字符，直到满足整个表达式的条件。
   - 例如，正则表达式 `a.*b` 在字符串 `a123b456b` 中会匹配 `a123b456b`，因为 `.*` 会尽可能多地匹配字符。

2. **非贪婪模式**：
   - 在量词后加上 `?`，使其变为非贪婪模式。这意味着它会尽可能少地匹配字符。
   - 例如，正则表达式 `a.*?b` 在字符串 `a123b456b` 中会匹配 `a123b`，因为 `.*?` 会尽可能少地匹配字符，直到找到第一个 `b`。

### 在你的正则表达式中的应用

在你的正则表达式中，`[^\s]+?` 是非贪婪的部分。这里的 `+?` 表示：

- `+` 表示匹配一个或多个非空白字符。
- `?` 使得这个匹配变为非贪婪模式。

#### 具体匹配过程

- 假设我们有一个字符串 `http://example.com/image.jpg`。
- 当正则表达式引擎处理 `https?://` 时，它会匹配 `http://`。
- 接下来，它会处理 `[^\s]+?`：
  - 在非贪婪模式下，它会尽可能少地匹配字符，直到满足后面的条件（即遇到一个点 `.`）。
  - 在这个例子中，它会匹配 `example.com`，因为这是一个有效的非空白字符序列，且后面跟着一个点 `.`。

### 总结

非贪婪模式的关键在于它会尽可能少地匹配字符，但并不是说它只能匹配一个字符。它会匹配尽可能多的字符，但会在遇到后续条件时（如点 `.`）停止匹配。因此，在你的正则表达式中，`[^\s]+?` 会匹配到 `example.com`，而不是仅仅匹配到 `e` 或 `ex`。

来自于匹配图片的正则表达式