created: 20241122011945106
creator: uzvg
modified: 20250317081611204
modifier: uzvg
tags: FleetingNotes Learning
title: 先看视频建立直观印象
type: text/vnd.tiddlywiki

所以我现在学编程，都是先看视频，建立初始印象，建立知识点地图，然后看书，大致阅读一下，知道每个具体知识点的位置，然后开始做项目，需要系统性地了解某个知识点的时候，就去看书，把书当做字典来用，你认为这种学习方法效率怎么样？有什么需要提升的地方吗？

!! 优点：
; 先看视频建立直观印象：
* 视频能快速建立知识框架，让你对全貌有初步认识，降低了心理门槛。
* 有助于把抽象的概念具体化，方便理解，尤其是在编程中，代码示范能更直观地展现逻辑。

; 书籍作为知识地图和工具书：
* 阅读书籍以了解知识点分布，把握整体体系，这样在需要时能快速定位关键内容。
* 不强求逐字阅读，而是按需查阅，避免冗长阅读导致的低效。

; 实践驱动学习：
* 项目实践能帮助你在解决实际问题的过程中巩固知识，强化记忆，同时学会灵活应用。
* 遇到问题时，通过查阅书籍深入理解，能让知识点更有针对性和上下文。

!! 可以提升的地方：

; 明确项目难度的梯度：
* 项目是学习的核心驱动力，选择适当难度的项目至关重要。
* 初期可以选择模仿性较强的项目（如简单的计算器、博客系统），后期尝试更开放的创意型项目，以挑战未知领域。
* 同时，记录项目开发中的“卡点”，这些问题通常反映了你知识的薄弱环节，可以帮助你制定后续学习计划。

; 定期复盘知识地图：
* 在完成阶段性学习后，回头检查自己的知识地图，补充遗漏的或不熟练的知识点，确保体系完整。
* 将新学的内容标注在知识地图中，比如学了新的库或工具，把它们与已有知识联系起来。

; 多动手实践代码细节：
* 视频和书籍常常提供完整的代码范例，但你可以主动拆解这些代码，逐步实现每个功能，增强对细节的理解。
* 在练习过程中，尝试“自己写而不是复制”，并多思考“为什么这样写”。

; 寻找反馈与优化：
* 自己写代码时，可能存在潜在的问题或优化空间。通过代码审查（Code Review）或加入编程社区，向他人请教，可以快速发现不足。

; 多来源交叉学习：
* 不同资源（比如教程、博客、论坛）有不同的侧重点，多尝试不同风格的内容，可以帮助你用多角度理解同一知识点。
* 如果某个概念书本难以理解，可以寻找相关视频，或者查看在线文档和博客。

; 加入间隔复习法：
* 编程知识容易遗忘，尤其是语法细节或某些操作。可以把学习过的知识点或代码片段整理成笔记，定期复习。
* 使用工具（如Anki）建立编程相关的记忆卡片，尤其适合记忆API、语法规则、常见错误等。

!! 进一步优化的建议：

; 加入小测验或问题引导：
* 在看视频或阅读时，先试着回答几个小问题，比如“这个知识点的典型用例是什么？”“如果不按书上写的方式实现，会发生什么？”这样可以更主动地参与学习。

; 探索系统化书籍或资源：
* 尽管你把书籍当作字典用，但在需要深入理解某些知识点时，可以选择一本好书系统化地学习。例如，深入理解某个框架（如Django或Flask），可以挑选一本专注于该框架的书籍通读。

; 学会调试与排错：
* 编程不仅是写代码，调试也是核心技能。每次遇到Bug，尝试通过日志、调试工具、或阅读源码找到问题，并记录你的思路和解决过程，这对提升编程能力非常重要。

; 定期回顾学习进度：
* 每隔一段时间，复盘自己的学习历程：哪些方法有效？哪些地方需要调整？记录下来并迭代优化学习策略。