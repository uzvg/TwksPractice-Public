created: 20241122015052051
creator: uzvg
modified: 20250317081611219
modifier: uzvg
tags: FleetingNotes
title: 正则表达式中的贪婪匹配跟非贪婪匹配
type: text/vnd.tiddlywiki

正则表达式中的 **贪婪匹配** 和 **非贪婪匹配** 是控制匹配范围的重要概念，它们主要体现在量词（如 `*`、`+`、`?`、`{m,n}`）的行为上。以下是它们的定义和区别：

---

### **1. 贪婪匹配（Greedy Matching）**
- **定义**：尽可能多地匹配字符，直到不再满足匹配条件。
- **行为**：贪婪匹配会尝试扩展匹配范围，直到当前模式的匹配条件无法满足为止，然后再回溯（如果需要）寻找满足整体模式的匹配结果。
- **特性**：优先覆盖尽可能多的字符。

**常用的贪婪量词：**
- `*`（匹配 0 次或多次）
- `+`（匹配 1 次或多次）
- `?`（匹配 0 次或 1 次）
- `{m,n}`（匹配 m 到 n 次）

**示例：**
正则表达式：`<.*>`  
输入字符串：`<div><span>Hello</span></div>`  
- 贪婪匹配结果：`<div><span>Hello</span></div>`  
- 解释：`.*` 会匹配尽可能多的字符，直到最后一个 `>`。

---

### **2. 非贪婪匹配（Lazy Matching）**
- **定义**：尽可能少地匹配字符，同时满足整体模式的匹配条件。
- **行为**：非贪婪匹配会尝试缩小匹配范围，先满足整体模式的匹配条件，而不是扩展匹配范围。
- **特性**：优先匹配尽可能少的字符。

**非贪婪量词：**
通过在贪婪量词后面加 `?` 实现非贪婪匹配：
- `*?`（匹配 0 次或多次，尽可能少）
- `+?`（匹配 1 次或多次，尽可能少）
- `??`（匹配 0 次或 1 次，尽可能少）
- `{m,n}?`（匹配 m 到 n 次，尽可能少）

**示例：**
正则表达式：`<.*?>`  
输入字符串：`<div><span>Hello</span></div>`  
- 非贪婪匹配结果：`<div>`  
- 解释：`.*?` 会匹配尽可能少的字符，直到第一个 `>`。

---

### **3. 贪婪匹配和非贪婪匹配的对比**

| 特性             | 贪婪匹配                           | 非贪婪匹配                      |
|------------------|-----------------------------------|--------------------------------|
| **匹配策略**      | 尽可能多匹配字符                  | 尽可能少匹配字符               |
| **符号**          | `*`, `+`, `?`, `{m,n}`           | `*?`, `+?`, `??`, `{m,n}?`    |
| **回溯行为**      | 匹配到最大范围后，必要时回溯调整 | 从最小范围开始扩展             |
| **适用场景**      | 匹配最长可能的部分                | 精确控制范围，避免过度匹配      |

---

### **4. 示例分析**
假设我们有一个字符串：`"abbbbc"`  
正则表达式是：`a.*b`

#### **贪婪匹配**
- **解释**：`.*` 会尽可能多地匹配，因此匹配结果为 `"abbbb"（前面的 b 包含在 .* 中）`。
- **过程**：
  - `.*` 先匹配 `"abbbb"`;
  - 然后正则引擎回溯，最终匹配整个 `"abbbb"`。

#### **非贪婪匹配**
- 修改正则为：`a.*?b`  
- **解释**：`.*?` 会尽可能少地匹配，因此匹配结果为 `"ab"（最小的可能匹配范围）`。
- **过程**：
  - `.*?` 从 `a` 开始，只匹配到第一个 `b` 为止，停下匹配。

---

### **总结**
- **贪婪匹配**：优先匹配更多字符，再回溯调整（若必要）。
- **非贪婪匹配**：优先匹配最少字符，再扩展调整（若必要）。

理解贪婪和非贪婪匹配的区别，关键在于根据需要选择正确的量词类型，以确保匹配的结果符合预期。