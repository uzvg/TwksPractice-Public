created: 20241118130557008
creator: uzvg
modified: 20250317090326785
modifier: uzvg
progress: Pending
rating: Doubtful
tags: Python PermanentNotes
title: Python函数的参数传递规则
type: text/vnd.tiddlywiki
visibility: Public

!! 位置参数vs默认参数vs关键字参数

位置参数是关于**函数调用**的。

默认参数是关于函数*定义*的，关键字参数是关于函数*调用*的。  只有位置参数的定义和使用都与函数调用直接相关。  位置参数的值完全由它们在函数调用中的位置决定。  函数定义只规定了位置参数的个数和类型，而没有赋予它们默认值。

为了更清晰地说明，让我们回顾一下三种参数类型的区别：

* **位置参数:**  在函数调用中，根据参数在函数定义中出现的顺序来传递值。  它们没有默认值，必须在调用函数时提供。

* **默认参数:**  在函数定义中为参数赋予默认值。  在函数调用时，可以省略这些参数，或者提供不同的值来覆盖默认值。  默认值在函数定义时计算一次。

* **关键字参数:**  在函数调用中，通过参数名来指定参数的值。  这允许以任何顺序传递参数，并且可以省略某些参数（如果它们有默认值）。


因此，只有位置参数的值完全取决于函数调用中的位置，而默认参数和关键字参数则提供了更大的灵活性，允许在调用时以不同的方式传递值。



!! 默认参数跟关键字参数的区别：

虽然默认参数和关键字参数在调用函数时都可以用`键=值`的形式，但它们在本质和使用方式上存在关键区别：

* **默认参数**是在函数 *定义* 时就为参数赋予默认值。  这使得调用函数时，可以省略带有默认值的参数。  默认值只在函数定义时计算一次。

* **关键字参数**是在函数 *调用* 时，明确指定参数名和值进行传递。  这允许调用者以任何顺序传递参数，而无需遵守参数在函数定义中的顺序。


关键区别在于**何时**以及**如何**指定参数的值：

* **默认参数:**  在函数定义中设置，在调用时可以选择性地提供值来覆盖默认值。

* **关键字参数:**  在函数调用时显式指定，允许跳过位置参数，并以任意顺序传递参数。


**示例说明差异:**

```python
def func_default(a, b=10):  # b是默认参数
    print(f"a: {a}, b: {b}")

def func_keyword(a, b):  # 没有默认参数
    print(f"a: {a}, b: {b}")


func_default(5)       # b使用默认值10
func_default(5, 20)   # b被覆盖为20
func_keyword(a=5, b=20) # 使用关键字参数，顺序无关紧要
#func_keyword(5, b=20) # 这是合法的，位置参数+关键字参数
#func_keyword(b=20, 5) # 这是非法的，位置参数必须在关键字参数之前
```

简而言之，默认参数是关于函数定义的，而关键字参数是关于函数调用的。  它们可以一起使用，但默认参数必须在关键字参数之前定义。


[1](https://realpython.com/python-kwargs-unpack-dictionary/)[2](https://www.geeksforgeeks.org/args-kwargs-python/)[3](https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments)


!! 参数传递的先后顺序：

在Python中调用函数并传递参数时，参数的顺序遵循以下规则：

1. **位置参数必须在关键字参数之前:**  这是最基本的规则。  你不能在位置参数之后使用关键字参数。

2. **默认参数必须在非默认参数之后:**  在函数定义中，带有默认值的参数（默认参数）必须放在没有默认值的参数（位置参数）之后。

3. **关键字参数的顺序无关紧要:**  一旦你开始使用关键字参数，参数的顺序就不再重要了。你可以按任何顺序指定关键字参数。

4. **`*args` 必须在 `**kwargs` 之前:**  如果你的函数同时使用 `*args` 和 `**kwargs`，那么 `*args` 必须在 `**kwargs` 之前。


**示例说明:**

```python
def my_function(a, b=2, *args, c=3, **kwargs):
    print(f"a: {a}, b: {b}, args: {args}, c: {c}, kwargs: {kwargs}")

# 合法的调用方式
my_function(1, 4, 5, 6, c=7, d=8)  # 位置参数 + 关键字参数
my_function(1, b=4, 5, 6, c=7, d=8) # 非法，位置参数后跟关键字参数
my_function(1, 4, 5, 6, d=8, c=7)  # 关键字参数顺序无关紧要
my_function(1, *[4,5,6], c=7, d=8) # 使用*args解包列表

# 函数定义中默认参数必须在非默认参数之后
def bad_function(a=1, b): # 非法
    pass

def good_function(b, a=1): # 合法
    pass

# *args必须在**kwargs之前
def my_function2(a, *args, **kwargs):
    pass

def my_function3(a, **kwargs, *args): # 非法
    pass
```

违反这些规则会导致 `SyntaxError` 或 `TypeError`。  理解这些顺序规则对于编写清晰、可读且正确的Python代码至关重要。


[1](https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments)[2](https://realpython.com/defining-your-own-python-function/)[3](https://www.w3schools.com/python/python_functions.asp)


总结：

你的总结很不错，准确地抓住了Python函数参数传递的关键点。  让我稍微补充完善一下：

* **位置参数:**  完全依赖于函数定义中参数的顺序和函数调用中值的顺序。  两者必须一一对应。

* **默认参数:**  在函数*定义*时指定默认值。  在函数*调用*时，可以省略这些参数（使用默认值）或提供新值来覆盖默认值。  **关键在于它们必须在函数定义中位于所有位置参数之后。**  这并非因为它们与调用相关，而是为了避免歧义。如果允许默认参数出现在位置参数之前，解释器将无法区分一个参数是位置参数还是默认参数。

* **关键字参数:**  在函数*调用*时，通过参数名来指定值。  这允许以任何顺序传递参数，并且可以省略某些参数（如果它们有默认值）。  **它们必须在函数调用中位于所有位置参数之后。**  这同样是为了避免歧义。  如果关键字参数出现在位置参数之前，解释器将无法确定哪些参数是位置参数，哪些是关键字参数。


所以，你的总结中“默认参数，跟函数的定义相关”和“关键字参数，只与函数调用相关”的说法，需要更精确地表达。  它们都与函数定义和调用都有关，只是它们在定义和调用中扮演的角色不同，并且在定义和调用中的位置受到限制，以避免歧义。  它们的位置限制是语法规则，而不是因为它们与定义或调用本身的内在联系。
