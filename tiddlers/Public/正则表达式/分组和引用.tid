caption: 分组和引用
created: 20240820065132893
creator: uzvg
modified: 20250317090326819
modifier: uzvg
progress: Archived
rating: Plain
tags: PermanentNotes 正则表达式
title: 正则表达式/分组和引用
type: text/vnd.tiddlywiki
visibility: Public

在正则表达式中，分组和引用，可以帮助我们匹配和操作字符串中的特定部分。其中，分组允许我们将多个模式组合在一起，并对它们进行操作，而引用则允许我们在同一正则表达式中引用先前匹配的内容。在正则表达式中，使用圆括号 `()` 可以创建一个分组，被创建的分组通常被视为一个整体。根据分组是否能被引用，分为捕获分组跟非捕获分组，其中，捕获分组又可分为数字分组跟命名分组。具体如下：

1. 数字捕获分组跟数字引用

    数字捕获分组跟数字引用是对应的，即被数字分组捕获的分组，需要通过数字引用来重新引用。如下：
<<image-basic "Pastedimage20240314172703.png">>

    `(ha)`表示利用 `()`将 `ha` 捕获为数字分组`1`，并在之后使用数字引用`\1`引用捕获到的第一个分组，于是匹配到的字符串，是两个连续的 `ha`。

2. 命名捕获分组跟命名引用

    命名捕获分组跟命名引用是对应的，即被命名分组捕获的分组，需要通过命名引用来重新引用。命名捕获组的语法如下：`(?<name>group)`或`(?'name'group)`，其中`name`表示捕获组的名称，`group`表示捕获组里面的正则。我们可以用`\k<name>` 或 `\k'name'`的形式来对前面的命名捕获组捕获到的值进行引用，如下：
<<image-basic "Pastedimage20240314172820.png">>

    `(?<first>ha)`表示使用 `(?<first>ha)`命名捕获的方式将 `ha` 捕获为命名分组`first`，而`(\k<first>)`表示命名分组`first`的引用。

    ⚠️ 需要注意的是，这里的`()`前的`?`并非是非捕获分组的意思，而是命名捕获的格式。

3. 非捕获分组

    非捕获组，跟捕获组相比，它不会把正则匹配到的内容保存到分组里面。
    <<image-basic "Pastedimage20240314173050.png" caption:"非捕获分组">>

    字符串分组`ha`虽然被捕获，但却未被分组，所以它无法通过数字分组跟命名分组的方式被引用。

    非捕获分组，常用于在多个固定的字符串中匹配其中一个，如下：
    <<image-basic "Pastedimage202403.png" caption:"非捕获分组被用于匹配固定字符串">>

    如上，`(?:white|black)`该非捕获分组匹配到字符串`white`或`black`。

    但是，这里需要注意的是，非捕获分组跟正则表达式中的`|`表达式的区别，如下：
    ![](screenshot2024.png)
    `|`表达式没有包围在()里，其范围是整个正则表达式对， 即要么匹配`|`左边的内容，要么匹配`|`右边的内容。再比如，`z|food`能匹配`z`或`food`。`(?:z|f)ood`则匹配`zood`或`food`。

4. 分支重置分组

    分支重置组内的选择项共享相同的捕获组。语法是`(?|regex)`，其中`(?|`打开组，而`regex`可以是任意的正则表达式。如果不使用任何选择项或捕获分支重置组内的组，则其特殊功能将不起作用。那么它将作为一个非捕获组。        

    如：正则表达式`(?|(a)|(b)|(c))`由一个带有三个选择项的分支重置组组成。此正则表达式匹配`a` ，`b`或`c` 。正则表达式只有一个捕获组，编号为1，由所有三个选择项共享。匹配结束后，`$1`存储`a`,`b`或`c` ，具体示例如下：

    <<image-basic "Screenshotfrom2024-03-2523-33-56.png">>

    通过分支重置分组，分组`1`中，要么是a，要么是b，要么是c，所以当我们通过`(?|(a)|(b)|(c))\1\1\1`，在重置分组后又引用三次`1`号分组，每次匹配到的，都是同一个字母。

    再比如：
    <<image-basic "Pastedimage20240314174202.png">>
    匹配到的要么是`apple apple`，要么是`banana banana`。
    将此与正则表达式`(a)|(b)|(c)`进行比较。后者也匹配`a` ，`b`或`c` 。但是它具有三个捕获组。匹配结束后，`$1`保留`a`或什么都不保留，`$2`保留`b`或什么都不保留，而`$3`保留`c`或什么都不保留。