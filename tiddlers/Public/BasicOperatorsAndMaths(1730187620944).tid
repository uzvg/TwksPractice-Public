authors: [[Ilya Kantor]]
caption: BasicOperatorsAndMaths
created: 20241026072927586
creator: uzvg
description: javaScript中的基本操作符
medium: Website
modified: 20250317090326763
modifier: uzvg
progress: Pending
tags: LiteratureNotes JavaScriptFundamentals
title: BasicOperatorsAndMaths(1730187620944)
type: text/vnd.tiddlywiki
url: https://javascript.info/operators
visibility: Public
year: 2022/11/14

!! 一元操作符、二元操作符、操作数

<<rememberq "20241026073005985"
	"什么是`一元操作符`？"
	"仅需要一个`操作数`的操作符叫做一元操作符。">>

<<rememberq "20241026073113871"
	"一元操作符的英文？"
	"unary">>

<<rememberq "20241026073132862"
	"二元操作符的英文"
	"binary">>

<<rememberq "20241026073757175"
	"指数运算的英文？"
	"exponentiation">>

<<rememberq "20241026073851004"
	"余数运算的操作符是什么？"
	"`%`">>

<<rememberq "20241026073911460"
	"余数运算的作用是什么？"
	"取余">>

<<rememberq "20241026073924068"
	"javaScript中的指数运算的操作符怎么写？"
	"`alert(2 ** 2)`，代表`2`的平方。">>

<<rememberq "20241026074031232"
	"指数运算的指数，可以为非整数吗？"
	"与数学中的运算刺，可以为非整数，比如`分数`，alert( 4 ** (1/2) ); 代表开根号4">>

!! 加号作为连接符/串联符

<<rememberq "20241026074220585"
	"连接符的英文？"
	"concatenation">>

<<rememberq "20241026074306554"
	"`+`在什么时候作为连接符？"
	"当它的两个操作数中含有一个字符串类型的数值时。">>

<<rememberq "20241026083217930"
	"`+`作为连接符的法则是什么？"
	"`+`运算从左往右运行，只要加号的两个操作数的其中一个是字符串值，那么它扮演的就是连接符的角色，以此类推。">>

<<remembercz "20241026083043348"
	"""alert(2 + 2 + '1' ); {"41" and not "221"}""">>

<<rememberq "20241026083748302"
	"alert('1' + 2 + 2);"
	"""("122" and not "14")""">>

<<remembercz "20241026080108317"
	"""`alert( 2 + '1' );`的结果是{"21"}""">>

<<rememberq "20241029070351907"
	"除`+`外，其他数学运算符号如何处理字符串值？"
	"先将左右两边的操作数做`string`➡`number`的转换，再计算。">>

<<rememberq "20241029070629741"
	"""`alert( 6 - '2' );`的结果是？"""
	"4">>

<<rememberq "20241029070707354"
	"`alert( '6' / '2' );`的结果是？"
	"3">>

!! +作为一元运算符

<<rememberq "20241029070752224"
	"`+`作为一元运算符的作用是什么？"
	"跟`Number()`类似，但更短。">>

<<rememberq "20241029070907522"
	"`alert( +true );`的结果是？"
	"1">>

<<rememberq "20241029070937269"
	"""`alert( +"" );`的结果是？"""
	"0">>

!! 操作符优先级

 <<rememberq "20241029071355480"
	"`=`的优先级是多少？"
	"2">>

<<rememberq "20241029071409421"
	"总体来说，`=`的优先级较低，次于什么运算符？"
	"次于`||`跟`??`运算符">>

<<rememberq "20241029071627817"
	"""`let a = 1;
let b = 2;
let c = 3 - (a = b + 1);`c=？"""
	"0">>

<<rememberq "20241029071903367"
	"`++`跟`--`符号的作用跟位置有关系吗？"
	"有，位置不同，操作符返回的值也不同；具体来说，`++`在前，则返回自增后的值，`+`在后，则返回自增前的值。">>

<<rememberq "20241029072132769"
	"自增或者自减的优先级多高？"
	"`++`的优先级在14跟15，优先级非常高，大于常见的`*`，`**`。">>

<<rememberq "20241029072434443"
	"`++`的优先级跟`+=`的优先级哪个高？"
	"`++`的优先级为14或15，而`+=`的优先级跟`=`相同，为3，所以前者高。">>

<<rememberq "20241029072542878"
	"`+=`跟`*=`的优先级哪个高？"
	"一样高，都为3">>

<<rememberq "20241029072618513"
	"""`let counter = 1;`
`alert( 2 * ++counter );`的结果是？"""
	"4">>

<<rememberq "20241029072739194"
	"优先级最低的运算符是？"
	"`,`">>

<<rememberq "20241029072752459"
	"`,`运算符的作用是？"
	"用于分隔表达式，分隔的表达式会被全部执行，且返回最后一个表达式的计算结果。">>

<<rememberq "20241029073218359"
	"`,`跟`=`的运算优先级哪个高？"
	"`=`高。">>

<<rememberq "20241029073250073"
	"""`let a = (1 + 2, 3 + 4);`的运算结果是？"""
	"7">>

<<rememberq "20241029073327504"
	"""`a = 1 + 2, 3 + 4`的运算结果是？"""
	"3">>

<<rememberq "20241029073823260"
	"""`"" + 1 + 0`的运算结果是？"""
	"""`"10"`""">>