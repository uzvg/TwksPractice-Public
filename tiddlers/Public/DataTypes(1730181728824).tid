authors: [[Ilya Kantor]]
caption: DataTypes
created: 20241025134814390
creator: uzvg
description: javaScript中的数据类型
medium: Website
modified: 20250317090326769
modifier: uzvg
progress: Pending
tags: LiteratureNotes JavaScriptFundamentals
title: DataTypes(1730181728824)
type: text/vnd.tiddlywiki
url: https://javascript.info/types
visibility: Public
year: 2024/10/25

!! 变量跟数据类型

javaScript中有八种基本数据类型，而变量不跟任何一种数据类型绑定，也就是说，我们可以赋给变量任意基本类型的值。

!! 数字(number)

数字除了`整数`跟`浮点数`这两个基本数字类型外，还包括三种特殊的数字类型，即：`Infinity`(正无穷)，`-Infinity`(负无穷)，`NaN`(表示计算错误：Not A Number)。

在javaScript中比较特殊的是，像`正无穷`这样的数，可以直接用字符串`Infinity`本身来表示，如：

```
alert(1/0); //得到一个正无穷数，即(Infinity)
alert(Infinity); //跟上面效果相同，也是一个正无穷数
```

`NaN`是一个比较特殊的数字，在javaScript的数字计算中代表计算错误。它的特点是具有很强的`传染性`，在javaScript的数字表达式中，只要有一个`NaN`，整个表达式的计算结果都将是`NaN`。

唯一特殊的是，`NaN ** 0`等于`1`。这个就相当于数学中的任何数的0次方，其结果都是`1`。

```
alert( "not a number" / 2 ); // NaN, such division is erroneous

// 以下计算的结果都是NaN
alert( NaN + 1 ); // NaN
alert( 3 * NaN ); // NaN
alert( "not a number" / 2 - 1 ); // NaN
alert(NaN ** 0) //1
```

javaScript中的数学表达式都很安全，不会出现像C或者C++中的fatal error，导致整个程序崩溃，javaScript下的数学表达式，顶多就是出现`NaN`，而且也不会导致整个脚本''崩溃''。

在javaScript中，整数的安全范围是`±(2^^53^^-1)`，超过这个范围，计算将会无效，也就是说，所有大于`9007199254740991`的数字，都无法被储存在`数字(number)`类型中。如下：

```
console.log(9007199254740991 + 1); // 9007199254740992
console.log(9007199254740991 + 2); // 9007199254740992
```

这是因为，不是所有数字都能被储存在64位的内存中，而一旦超过了这个范围，就会导致精度方面的误差。

!! 大整数(BigInt)

大整数类型，被用于保存任意长度的整数，写法是在数值后附加`n`字符，如下：

```
// the "n" at the end means it's a BigInt
const bigInt = 1234567890123456789012345678901234567890n;
```

大整数常见的应用场景不多。

!! 字符串(string)

javaScript中没有字符类型的变量，只有字符串类型。而javaScript中的字符串有三种格式，分别是`''`，`""`，还有反引号，'`' '`' ，其中'`'
'`'中，可以嵌入其他表达式的值，如下：

```
let name = "John";
// embed a variable
alert( `Hello, ${name}!` ); // Hello, John!
// embed an expression
alert( `the result is ${1 + 2}` ); // the result is 3
```

!! 布尔类型(Boolean)

布尔类型只有两个值，`true`或`false`。

!! null跟undefined：

在JavaScript中，`null`和`undefined`都表示值的缺失，但它们有不同的含义和使用场景。

<$twks.details summary="1. null" state="$:/state/detail">

在javaScript中，`null`值跟其他语言中的不同，并不指向一个空值，空指针等。确切地来说，它表示的是，`nothing`，`empty`，`value unknown`，如下：

```
let age = null;
```

也就是说，`null`代表一个变量的状态为`未知`（`unknown`）。

</$twks.details>

<$twks.details summary="2. undefined" state="$:/state/detail1">

`undefined`的意思是，并未被分配值，也就是说，假如一个变量仅被声明，但却并未为其赋值，这样的变量，它的值，就是`undefined`。

```
let age;
alert(age); // shows "undefined"
```
</$twks.details>

<$twks.details summary="3. null vs undefined" state="$:/state/detail2">

|!类别 | !undefined | !null |
|!含义 |表示变量已声明但尚未赋值。它是JavaScript的默认值。当尝试访问未初始化的变量、函数没有显式返回值或对象缺少某个属性时，都会返回`undefined`。 |表示有意地将一个变量或对象属性设置为“无值”状态。它是一个`赋值`，用来表示变量或属性应该为`空`。 |
|!使用场景 |常用于检查变量是否已赋值，以避免使用未初始化的变量。 |常用于初始化变量，表示该变量有意为`空`，也可用于清除变量的值，将变量设置为`null`，可以清除其当前值，释放内存或重置状态。 |
|!相等性比较 |`null`和`undefined`在使用宽松相等运算符(`==`)比较时相等，但在使用严格相等运算符(`===`)比较时不相等。 |<|
|!类型|`typeof null` 返回 `"object"`（这是一个历史遗留问题），而`typeof undefined`返回`"undefined"`。 |`null`跟`undefined`一样，应该都是表示独立类型的值。 |
|!在实践中 |尽量避免显式地将变量设置为 `undefined`。让 JavaScript 引擎自动处理未赋值变量的默认 `undefined` 值即可。 |当需要表示一个变量或属性没有值时，使用 `null`。 |

</$twks.details>

总而言之，`undefined` 表示变量未赋值，是 JavaScript 的默认行为；而 `null` 表示有意地将变量设置为无值状态，是一种人为赋值。理解它们的区别有助于编写更清晰、更健壮的 JavaScript 代码。

!! typeof 操作符

* `typeof`看起来很像函数，但它并`不是函数`，而是一个`操作符`，用于返回操作数的类型。
* 正常使用格式应该是`typeof x`，但`typeof (x)`也能用。
* `typeof null`会返回`"object"`，这是一个官方承认的历史遗留问题，`null`的数据类型应该是`null`本身，`null`类型。

!! 总结：

这节的内容看起来很多，但主要是介绍一些比较基础的知识点，主要用于区分一些非常细微的区别。

<<rememberq "20241025155142881"
	"javaScript的数字有哪几种类型？"
	"整数、浮点数、`Infinity`、`-Infinity`、`NaN`">>

<<rememberq "20241025155302912"
	"javaScript中的NaN数字类型表示什么意思？"
	"Not A Number，表示计算错误。">>

<<rememberq "20241029055435874"
	"在什么情况下，javaScript中的计算结果会是`NaN`？"
	"""运算错误的情况下，比如`"stringText"/2`，其结果就将是`NaN`。""">>

<<rememberq "20241025155337589"
	"javaScript中的NaN，在运算时有什么特点？"
	"NaN在计算中还有极强的感染性，也就是说，在javaScript的数字运算中，只要有一个NaN，不论后面是什么，其最终结果都将是NaN。">>

<<rememberq "20241025155631798"
	"NaN在运算中的唯一的例外是什么？"
	"NaN ** 0 的值等于1，并且在此之后的所有数字计算，都能正常进行，比如`NaN ** 0 + 1`，其结果就为`2`">>

<<rememberq "20241025155756790"
	"javaScript中的字符串类型有哪几种格式？"
	"有三种类型的字符串格式，分别是`单引号`格式，`双引号`格式以及`反引号`格式，其中比较特殊的是反引号格式，反引号格式中，可以进行任意类型的计算，无论是数字之间的运算还是变量之间的运算。">>

<<rememberq "20241029055815788"
	"如何在字符串中的反引号格式中进行运算？"
	"在`${}`操作符中写入表达式就可进行任意运算。">>

<<rememberq "20241025160144067"
	"javaScript中的`null`类型跟`undefined`类型的变量，有什么相同点？"
	"两者都表示值的缺失。">>

<<rememberq "20241025160439426"
	"javaScript中的`null`变量有什么特别？"
	"javaScript中的null类型的变量，往往由''人主动赋值''，用于表示变量或属性为空。当我们初始化一个变量，但暂时没有具体的值时，可以将其初始化为`null`类型的变量，表示该变量为空。">>

<<rememberq "20241025160734927"
	"什么是javaScript中的`undefined`类型？"
	"javaScript中的undefined类型表示变量虽已声明但并未赋值，这是javaScript的默认值。当javaScript访问某个未初始化的变量时，或者函数没有显式返回值时，都会返回undefined。我们经常在使用变量之前，检查其值是否为undefined，以避免使用未初始化的变量。">>

<<rememberq "20241025160941235"
	"null跟undefined类型有什么不同？"
	"undefined表示变量未赋值，是javaScript的默认行为，而null是一种人为赋值行为，将变量设置为无值状态。在实践中，我们应该避免显式地将变量设置为`undefined`，让javaScript引擎自动处理未赋值变量。">>

<<rememberq "20241025161205387"
	"typeof是一个函数还是一个操作符？"
	"typeof是一个操作符(operator)，并不是一个函数。尽管`typeof (x)`的用法是允许的，但那只是被当成了得到操作数的表达式中的一部分。">>

<<rememberq "20241025161400902"
	"关于typeof的一个遗留性历史问题是什么？"
	"`typeof null`的返回值显示为`object`，但其实`null`是一个独立的数据类型，跟`undefined`一样。">>

<<rememberq "20241026002118934"
	"`null`跟`undefined`的相等性是怎样的？"
	"null==undefined ✅ null === undefined ❌">>