caption: 零宽断言
created: 20240820065112188
creator: uzvg
description: 
modified: 20250317081611218
modifier: uzvg
tags: PermanentNotes 正则表达式
title: 正则表达式/零宽断言
type: text/vnd.tiddlywiki

零宽断言是正则表达式中的一种特殊的匹配模式，所谓断言，是说当它们在匹配字符串时，断言当前位置的前面或后面应该满足某种条件。零宽，是说以上这种断言都是零宽度的，它们自身不匹配任何字符，只是用来断言当前位置的前面或后面是否满足特定的条件。

根据匹配位置的不同，可分为先行断言跟后行断言，所谓先行断言，是说断言当前位置的后面应该满足某种条件；而后行断言，是说当前位置的前面应该满足某种条件；又根据匹配条件的不同，可分为正向断言跟负向断言，所谓正向，即表示肯定，负向，即表示否定。排列组合下来，总共有以下四种零宽断言的模式：

1.'' 正向先行断言''（Positive Lookahead）：`(?=pattern)`，表示断言在当前位置的后面，模式 `pattern`会出现，如：

<<image "Pastedimage20240312104339.png" caption:"正向先行断言">>

`\d`在正则表达式中代表数字字符，`+`是对`\d`的修饰，表示至少要有一个`\d`，后面的`(?=PM)`，是对之前`\d+`的修饰，即断言`\d+`之后必有`PM`，但`(?=PM)`自身却不匹配任何字符，于是最终匹配到的只有`PM`之前的数字`3`。

2. 负向先行断言（Negative Lookahead）：`(?!pattern)`，表示在当前位置之后，模式 `pattern` 不会出现，如：
    <<image "Pastedimage20240312104354.png" caption:"负向先行断言">>

    `\d`在正则表达式中代表数字字符，`+`是对`\d`的修饰，表示至少要有一个`\d`，后面的`(?!PM)`，是对之前`\d+`的修饰，即断言`\d+`之后不能有`PM`，但`(?!PM)`自身却不匹配任何字符，于是最终匹配到的只有后面没有`PM`的数字`4`。


3. 正向后行断言（Positive Lookbehind）：`(?<=pattern)`，表示在当前位置之前，模式 `pattern` 会出现，如：
    <<image "Pastedimage20240312104436.png" caption:"正向后行断言">>

    `\$`在正则表达式中代表符号`$`本身，因`$`自身在正则表达式中具有匹配文本行尾的含义，所以这里要用到转义字符`\`，`\d`在正则表达式中代表数字字符，`+`是对`\d`的修饰，表示至少要有一个`\d`，前面的`(?<=PM)`，是对后面`\d+`的修饰，即断言`\d+`之前必有`$`字符，但`(?<=\$)`自身却不匹配任何字符，于是最终匹配到的只有`$`之后的数字`5`。


4. 负向后行断言（Negative Lookbehind）：`(?<!pattern)`，表示在当前位置之前，模式 `pattern` 不应该出现，如：
    <<image "Pastedimage20240312104448.png" caption:"负向后行断言">>
    `\$`在正则表达式中代表符号`$`本身，因`$`自身在正则表达式中具有匹配文本行尾的含义，所以这里要用到转义字符`\`，`\d`在正则表达式中代表数字字符，`+`是对`\d`的修饰，表示至少要有一个`\d`，前面的`(?<!PM)`，是对后面`\d+`的修饰，即断言`\d+`之前不能出现`$`字符，但`(?<!\$)`自身却不匹配任何字符，于是最终匹配到的是前面没有`$`字符的`1024`。
---
总结：

* 先行断言是从当前位置向后查找，用于约束当前位置之后的字符，而后行断言是从当前位置向前查找，用于约束当前位置之前的字符。
* 正向断言是约束条件应该出现，而负向断言是约束条件不应该出现。
* 先行断言和后行断言都是零宽断言，意味着它们只是做条件约束，而不会消耗字符串。